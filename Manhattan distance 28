def manhattan_distance(puzzle, goal):
    distance = 0
    for i in range(9):
        x, y = divmod(i, 3)
        target_x, target_y = divmod(puzzle[i], 3)
        distance += abs(x - target_x) + abs(y - target_y)
    return distance

def a_star(start, goal):
    heap = []
    heapq.heappush(heap, (manhattan_distance(start, goal), start, ""))
    visited = set()
    while heap:
        (cost, puzzle, path) = heapq.heappop(heap)
        if puzzle == goal:
            return path

        visited.add(puzzle)
        zero_index = puzzle.index(0)
        x, y = divmod(zero_index, 3)
        moves = []
        if x > 0:
            moves.append((x - 1, y))
        if x < 2:
            moves.append((x + 1, y))
        if y > 0:
            moves.append((x, y - 1))
        if y < 2:
            moves.append((x, y + 1))

        for (i, j) in moves:
            new_puzzle = list(puzzle)
            new_puzzle[zero_index], new_puzzle[i * 3 + j] = new_puzzle[i * 3 + j], new_puzzle[zero_index]
            if tuple(new_puzzle) not in visited:
                heapq.heappush(heap, (cost + manhattan_distance(new_puzzle, goal), new_puzzle, path + [(i, j)]))
    return []

# Example usage
start = [1, 2, 3, 0, 4, 6, 7, 5, 8]
goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]

print(a_star(start, goal))
